# There are 2 type of xpath
1. absolute xpath (non-recommended): absolute xpath follows complete dom structure to indentify any specific element.
   e.g.  /html/body/div[1]/div[1]/div[1]/div/div/div/div[2]/div/div[1]/form/div[1]/div[1]/input

2. relative xpath: relative xpath works with any attribute of specific element
     e.g.  //tagname[@attribute='value']
           -> //input[@type="password"]
           -> //input[@data-testid="royal-pass"]
           -> //input[@placeholder="Password"]
           -> //input[@aria-label='Password']
           -> //*[@aria-label='Password']

    Basic XPath Methods:

    i) text method :  text method look for exact text of any particular web element.
                    e.g. //tagname[text()='text value']
                      -> //button[text()='Log in']
                      -> //a[text()='Create new account']

    ii) contains method : contains method search the element with the help of partial value of text and partial value
                          of any attribute.
                     e.g. //tagname[contains(text(), 'partial text')]
                      -> //button[contains(text(), 'Log')]
                      -> //a[contains(text(), 'Create new')]

                      e.g. //tagname[contains(@attribute, 'partial attr value')]
                        -> //input[contains(@aria-label, 'Pass')]
                        -> //button[contains(@data-testid, 'royal-login')]


    iii) and , or condition :  we can identify the element with the help multiple attribute with logical operators
                       # in case of and condition both the condition should be True.
                       e.g.  ->  //tagname[@att1='value' and @attr2='value']
                             ->  //input[@data-testid="royal-email" and @name='email']


                       # in case of or condition both the condition should be True.
                       e.g.  ->  //tagname[@att1='value' or @attr2='value']
                             ->  //input[contains(@data-testid,"royal") or @name='email']


    iv) starts-with :  start-with method look for starting value of any attribute.
                      e.g.   -> //tagname[starts-with(@attribute, 'start-value')]
                             -> //input[starts-with(@aria-label, 'Email')]
                             -> //a[starts-with(text(), 'Create new')]

    v) indexing with multiple matching element: If we have multiple matching element, then we can use indexing to findout
                                 target element.
                       e.g.  ->  (//tagname[@atribute='value'])[1]
                             ->  (//input[contains(@data-testid, 'royal')])[2]



#########################################################
# Advance XPath Methods

1) parent :  In this we will take reference of child element and target parent element.
             e.g  //ref_tagname[@attribute='value']//parent::tar_tagname[@attribute='value']
             ->   //th[contains(@class, 'productHeadTH')]//parent::tr
             -> //th[text()='PRODUCTS']//parent::tr
             -> //p[text()='Stock Traded']//parent::div
             -> //a[text()='3,018']//parent::h3//parent::div//parent::div

2) ancestor: ancestor method helps to identify the element with which upper side parent (grandparent, great grand parent)
              e.g   //ref_tagname[@attribute='value']//ancestor::tar_tagname[@attribute='value']
                 -> //a[text()='3,018']//ancestor::div[@class='ms_indicater']
                 -> //a[contains(@title,"To view all, click here")]//ancestor::div[@class='ms_indicater']

3) following : with the help following method we can findout all the element which are available downside of refer element
               on the web page.

               e.g    //ref_tagname[@attribute='value']//following::tar_tagname[@attribute='value']
                   -> //a[contains(@title,"To view all, click here")]//following::a[text()='Option Chain']

4) following-sibling: with the help following-sibling method we can find out all the element which are available downside of refer element
               on the in same family on web page. It only targe sibliung element.

                 e.g  //ref_tagname[@attribute='value']//following::tar_tagname[@attribute='value']
                   -> //span[text()='From']//following-sibling::p
5) preceding: with the help preceding method we can find out all the element which are available upper side of refer element
               on the web page.
                e.g. -> //ref_tagname[@attribute='value']//preceding::tar_tagname[@attribute='value']
                     -> //td[text()='Mumbai']//preceding::input[@id='birthday']
6) preceding-sibling:
               e.g  -> //ref_tagname[@attribute='value']//preceding-sibling::tar_tagname[@attribute='value']
                    -> //td[text()='Indore']//preceding-sibling::td[2]
